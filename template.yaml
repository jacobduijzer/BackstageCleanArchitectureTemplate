apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: dotnet-6-clean-architecture-webapi
  title: .NET 6 Clean Architecture Web Api Template
  description: This is a Clean Architecture Template for a new .NET 6 web api project
  tags:
    - net6
    - dotnet6
    - dotnet
    - webapi
    - clean-architecture

spec:
  owner: jacob@duijzer.com
  type: service
  parameters:
    - title: Provide component information
      required:
        - name
        - namespace
        - owner
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
        namespace:
          title: Namespace
          type: string
          description: The main namespace of the project
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        #copyWithoutRender:
        #  - .github/workflows/*
        values:
          name: ${{ parameters.name }}
          namespace: ${{ parameters.namespace }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    remoteUrl: ${{ steps.publish.output.remoteUrl }}
    entityRef: ${{ steps.register.output.entityRef }}
